// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  username     String     @id
  email        String     @unique
  password     String
  createdAt    DateTime   @default(now())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  Listener     Listener[]
  Artist       Artist[]
  refreshToken String     @default("") @db.VarChar(255)
}

model Role {
  id   Int    @id @default(autoincrement())
  role String
  User User[]
}

model Listener {
  user           User             @relation(fields: [username], references: [username], onDelete: Cascade)
  username       String           @id
  image          String
  ListenerArtist ListenerArtist[]
}

model Artist {
  user           User             @relation(fields: [username], references: [username], onDelete: Cascade)
  username       String           @id
  artistName     String
  image          String
  bio            String
  Album          Album[]
  ListenerArtist ListenerArtist[]
}

model Album {
  id             String   @id
  artist         Artist   @relation(fields: [artistUsername], references: [username], onDelete: Cascade)
  artistUsername String
  title          String
  genre          String
  createdAt      DateTime @default(now())
  image          String
  Song           Song[]
}

model Song {
  id       String @id
  album    Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId  String
  title    String
  duration Int
}

model ListenerArtist {
  listener         Listener @relation(fields: [listenerUsername], references: [username], onDelete: Cascade)
  listenerUsername String
  artist           Artist   @relation(fields: [artistUsername], references: [username], onDelete: Cascade)
  artistUsername   String

  @@id([listenerUsername, artistUsername])
  @@map("listener_artist")
}
